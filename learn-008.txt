为该项目做贡献

请话费一点时间来复习这篇文档，确保参与的每个人贡献过程更简单有效

按照这些准则有助于表达你尊重开发者的组织和开发这篇共享项目的时间的意愿。反过来，他们也会尊敬你的解决问题或者评估问题和特性工作。

## 使用问题跟踪

问题跟踪是[bug报告],[功能需求],[pull 申请]优先考虑的途径,并且请遵循以下规则：

*请 不要在个人提供的需求中使用问题跟踪（使用堆栈溢出）
*请 不要偏离或挑衅问题。保持讨论主题和尊重别人发言

<a name ="bug"></a>
##bug报告

一个bug是一个目录中代码产生的可证实的问题。好的bug报告是极为有用的 -谢谢！

bug 报告的准则：

1  使用 github 问题 搜索——检查这些问题是否已经被报告
2  检查这些问题是否已经被修改——尝试使用目录中最近的master分支或者开发分支再现它。
3  分解问题 ——创建一个【缩减实例】和一个生动的例子

一个好的bug报告不应该让其他人需要追问你更多信息。在bug报告中请尝试尽可能详细。你的环境？你重现问题的步骤？使用了什么浏览器和操作系统体验了这些问题？
你期望的输出？所有的这些细节将有助于他人修复潜在问题。

例如：
>简短而描述性的bug报告标题例子
>
> 一个问题的总括，哪个浏览器和操作系统产生的这个问题。如果适合，包含重现bug 的所需步骤。
>
>1. 这是步骤1
>2. 这是步骤2
>3. 其他步骤

>'<URL>'——一个缩减测试实例的链接
>
> 其他你想分享的适当的有利于问题被报告的信息。这可能有包含你识别的产生bug的代码某些行，一个潜在的解决方法（或者你认为在上面的优点）

<a name="feature"></a>
## 需求申请

好的需求申请——补丁，改进，新特性——都是很有效的。他们应该在范围内被保持关注，避免包含不相关的提交。

在着手重大的需求申请（例如 改进特新，代码重构，移植到不同语言）**请先询问**，否则你将有话费大量时间在项目开发者不想要合并的工作上的风险。

请 遵守整个项目的编码环境（例如 缩进，精确注释）和其他要求（如覆盖测试）

如果你想要参考项目包含，请遵循下面过程

1  【复制】项目（到你的服务器），克隆你的复制（到本地）
	git clone https://github.com/<your-usrname>/<repo-name>
	cd <repo-name>
	git remote add upstream https://github.com/<upstream-owner>/<repo-name>
	
2. 如果你很久以前克隆的项目，从upstream中获得最新的修改
	git checkout <dev-branch>
	git pull upstream <dev-branch>
	
3. 创建一个主题分支（远离主项目和开发项目）来包含你的特性，改变或者修改
	git checkout -b <topic-branch-name>

4. 提交你的逻辑修改。请遵循下面【git 提交准则】否则你的代码不大可能被合并到主项目中。在公之于众之前使用git的【交互rebase】特性来整理你的提交。

5. 在本地合并（或者rebase）upstream开发分支到你的主题分支
	git pull [--rebase] upstream <dev-branch>
	
6. 将你的主题分支推送到你的复制中。
	git push origin <topic-branch-name>
	
7. 打开一个提交申请，使用清晰的标题和描述。

重要：提交一个补丁，你应该允许项目所有者在拥有项目使用的相同许可条件下来执行你的工作。





